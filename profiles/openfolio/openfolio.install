<?php
/**
 * @file
 * Install, update and uninstall functions for the standard install profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function openfolio_install() {
  // Add text formats.
  $filtered_html_format = array(
      'format' => 'filtered_html',
      'name' => 'Filtered HTML',
      'weight' => 0,
      'filters' => array(
          // URL filter.
          'filter_url' => array(
              'weight' => 0,
              'status' => 1,
          ),
          // HTML filter.
          'filter_html' => array(
              'weight' => 1,
              'status' => 1,
          ),
          // Line break filter.
          'filter_autop' => array(
              'weight' => 2,
              'status' => 1,
          ),
          // HTML corrector filter.
          'filter_htmlcorrector' => array(
              'weight' => 10,
              'status' => 1,
          ),
      ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
      'format' => 'full_html',
      'name' => 'Full HTML',
      'weight' => 1,
      'filters' => array(
          // URL filter.
          'filter_url' => array(
              'weight' => 0,
              'status' => 1,
          ),
          // Line break filter.
          'filter_autop' => array(
              'weight' => 1,
              'status' => 1,
          ),
          // HTML corrector filter.
          'filter_htmlcorrector' => array(
              'weight' => 10,
              'status' => 1,
          ),
      ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'openfolio_theme');
  $admin_theme = 'seven';
  $blocks = array(
      array(
          'module' => 'system',
          'delta' => 'main',
          'theme' => $default_theme,
          'status' => 1,
          'weight' => 0,
          'region' => 'content',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'node',
          'delta' => 'recent',
          'theme' => $admin_theme,
          'status' => 1,
          'weight' => 10,
          'region' => 'dashboard_main',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'openfolio_misc',
          'delta' => 'powered-by',
          'theme' => $default_theme,
          'status' => 1,
          'weight' => 10,
          'region' => 'footer',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'system',
          'delta' => 'help',
          'theme' => $default_theme,
          'status' => 1,
          'weight' => 0,
          'region' => 'help',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'system',
          'delta' => 'main',
          'theme' => $admin_theme,
          'status' => 1,
          'weight' => 0,
          'region' => 'content',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'system',
          'delta' => 'help',
          'theme' => $admin_theme,
          'status' => 1,
          'weight' => 0,
          'region' => 'help',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'user',
          'delta' => 'login',
          'theme' => $admin_theme,
          'status' => 1,
          'weight' => 10,
          'region' => 'content',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'user',
          'delta' => 'new',
          'theme' => $admin_theme,
          'status' => 1,
          'weight' => 0,
          'region' => 'dashboard_sidebar',
          'pages' => '',
          'cache' => -1,
      ),

      array(
          'module' => 'views',
          'delta' => 'gallery_links-block',
          'theme' => $default_theme,
          'status' => 1,
          'weight' => 0,
          'region' => 'sidebar_first',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'views',
          'delta' => 'links-block',
          'theme' => $default_theme,
          'status' => 1,
          'weight' => 10,
          'region' => 'sidebar_first',
          'pages' => '',
          'cache' => -1,
      ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
      array(
          'type' => 'page',
          'name' => st('Basic page'),
          'base' => 'node_content',
          'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
          'custom' => 1,
          'modified' => 1,
          'locked' => 0,
      ),
      array(
          'type' => 'article',
          'name' => st('Article'),
          'base' => 'node_content',
          'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
          'custom' => 1,
          'modified' => 1,
          'locked' => 0,
      ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
      array(
          'type' => 'node',
          'bundle' => 'page',
          'mapping' => array(
              'rdftype' => array('foaf:Document'),
          ),
      ),
      array(
          'type' => 'node',
          'bundle' => 'article',
          'mapping' => array(
              'field_image' => array(
                  'predicates' => array('og:image', 'rdfs:seeAlso'),
                  'type' => 'rel',
              ),
              'field_tags' => array(
                  'predicates' => array('dc:subject'),
                  'type' => 'rel',
              ),
          ),
      ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
      'name' => st('Tags'),
      'description' => $description,
      'machine_name' => 'tags',
      'help' => $help,

  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'type' => 'taxonomy_term_reference',
      // Set cardinality to unlimited for tagging.
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
          'allowed_values' => array(
              array(
                  'vocabulary' => $vocabulary->machine_name,
                  'parent' => 0,
              ),
          ),
      ),
  );
  field_create_field($field);

  $instance = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'entity_type' => 'node',
      'label' => 'Tags',
      'bundle' => 'article',
      'description' => $vocabulary->help,
      'widget' => array(
          'type' => 'taxonomy_autocomplete',
          'weight' => -4,
      ),
      'display' => array(
          'default' => array(
              'type' => 'taxonomy_term_reference_link',
              'weight' => 10,
          ),
          'teaser' => array(
              'type' => 'taxonomy_term_reference_link',
              'weight' => 10,
          ),
      ),
  );
  field_create_instance($instance);


  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
      'field_name' => 'field_image',
      'type' => 'image',
      'cardinality' => 1,
      'locked' => FALSE,
      'indexes' => array('fid' => array('fid')),
      'settings' => array(
          'uri_scheme' => 'public',
          'default_image' => FALSE,
      ),
      'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
      ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
      'field_name' => 'field_image',
      'entity_type' => 'node',
      'label' => 'Image',
      'bundle' => 'article',
      'description' => st('Upload an image to go with this article.'),
      'required' => FALSE,

      'settings' => array(
          'file_directory' => 'field/image',
          'file_extensions' => 'png gif jpg jpeg',
          'max_filesize' => '',
          'max_resolution' => '',
          'min_resolution' => '',
          'alt_field' => TRUE,
          'title_field' => '',
      ),

      'widget' => array(
          'type' => 'image_image',
          'settings' => array(
              'progress_indicator' => 'throbber',
              'preview_image_style' => 'thumbnail',
          ),
          'weight' => -1,
      ),

      'display' => array(
          'default' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => 'large', 'image_link' => ''),
          'weight' => -1,
          ),
          'teaser' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
          'weight' => -1,
          ),
      ),
  );
  field_create_instance($instance);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
  ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
  ->execute();

  $item = array(
      'link_title' => st('Login'),
      'link_path' => 'user/login',
      'menu_name' => 'user-menu',
  );
  menu_link_save($item);


  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
  ->fields(array('status' => 1))
  ->condition('type', 'theme')
  ->condition('name', 'seven')
  ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');
}
/**
 * Implements hook_install_tasks().
 */
function openfolio_install_tasks() {
  $tasks['openfolio_enable_base'] = array(
      'display_name' => 'Enable Openfolio Base',

  );
  $tasks['openfolio_artist_account_form'] = array(
      'display_name' => 'Create Artist account',
      'type' => 'form'

  );
  $tasks['openfolio_content_form'] = array(
      'display_name' => 'Install Sample Content',
      'type' => 'form'

  );
  return $tasks;
}
function openfolio_artist_account_form(){
  $description = 'Optionally you can create the artist account for this site.  '
      . 'This account will be used to add and organize images and galleries.  '
          . 'This account will be assigned the "artist" role. It provides a simplified interface for site without dealing with the complexity of Drupal.  '
              . 'If you are an artist that just wants simplified site to organize a image portfolio create and login to this account.  '
                  . 'You can always sign into the Site Maintaince account later to add functionality';
  $form['artist_account'] = array(
      '#type' => 'fieldset',
      '#title' => st('Artist account'),
      '#description' => st($description),
      '#collapsible' => FALSE,
  );

  $form['artist_account']['account']['#tree'] = TRUE;
  $form['artist_account']['account']['name'] = array('#type' => 'textfield',
      '#title' => st('Username'),
      '#maxlength' => USERNAME_MAX_LENGTH,
      '#description' => st('Spaces are allowed; punctuation is not allowed except for periods, hyphens, and underscores.'),
      '#weight' => -10,
      '#attributes' => array('class' => array('username')),
  );

  $form['artist_account']['account']['mail'] = array('#type' => 'textfield',
      '#title' => st('E-mail address'),
      '#maxlength' => EMAIL_MAX_LENGTH,
      '#weight' => -5,
  );
  $form['artist_account']['account']['pass'] = array(
      '#type' => 'password_confirm',
      '#size' => 25,
      '#weight' => 0,
  );
  $form['artist_account']['artist_login'] = array(
      '#type' => 'checkbox',
      '#title' => st('Login into this account now'),
      '#description' => st('Automatically login and start using this account now.'),
  );
  $form['artist_account']['artist_send_email'] = array(
      '#type' => 'checkbox',
      '#title' => st('Send email now to the email address list above'),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => st('Save and continue'),
      '#weight' => 15,
  );
  return $form;
}
/**
 * Forms API validate for the site configuration form.
 */
function openfolio_artist_account_form_validate($form, &$form_state) {
  //no field were require but if any given then all most be filled out
  $account = $form_state['values']['account'];
  if (!empty($account['name']) || !empty($account['mail']) || !empty($account['mail']) ) {
    foreach ($account as $key => $account_value) {
      if (empty($account_value)) {
        form_error($form['artist_account']['account'][$key], 'All fields are require when creating an account');
      }
    }
    $admin_user = user_load(1);
    if ($account['name'] == $admin_user->name) {
      form_error($form['artist_account']['account']['name'], st('The Username must be different from the Admin username.'));
    }
    if ($account['mail'] == $admin_user->mail) {
      form_error($form['artist_account']['account']['mail'], st('The Email must be different from the Admin email.'));
    }
    if ($error = user_validate_name($account['name'])) {
      form_error($form['artist_account']['account']['name'], $error);
    }
    if ($error = user_validate_mail($account['mail'])) {
      form_error($form['artist_account']['account']['mail'], $error);
    }
  }

}

/**
 * Forms API submit for the site configuration form.
 */
function openfolio_artist_account_form_submit($form, &$form_state) {
  $account = $form_state['values']['account'];
  if (!empty($account['name']) || !empty($account['mail']) || !empty($account['mail']) ) {
    global $user;
    $account = $form_state['values']['account'];
    $account['status'] = 1;
    $account['init'] = 'email address';
    $role = user_role_load_by_name('artist');
    $account['roles'] = array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        $role->rid => 'artisit',
    );
    $account = user_save('', $account);
    if (!empty($form_state['values']['artist_login'])) {
      $user = user_load($account->uid);
      user_login_finalize();
    }
  }
}
function openfolio_enable_base() {
  $default_theme = 'openfolio_theme';
  theme_enable(array($default_theme));
  variable_set('theme_default', $default_theme);
  variable_set('site_frontpage', 'galleries');
  //add blocks
  $blocks = array(
      array(
          'module' => 'system',
          'delta' => 'main-menu',
          'theme' => $default_theme,
          'status' => 1,
          'weight' => 10,
          'region' => 'menu_bar',
          'pages' => '',
          'cache' => -1,
      ),
      array(
          'module' => 'system',
          'delta' => 'user-menu',
          'theme' => $default_theme,
          'status' => 1,
          'weight' => 10,
          'region' => 'header',
          'cache' => -1,
      ),


  );

  foreach ($blocks as $block) {
    $query = db_update('block')->fields($block);
    $query->condition('module', $block['module']);
    $query->condition('delta', $block['delta']);
    $query->condition('theme', $block['theme']);
    $query->execute();
  }
  $item = array(
      'link_title' => st('Contact'),
      'link_path' => 'contact',
      'menu_name' => 'main-menu',
      'weight' => 20
  );
  menu_link_save($item);
}
function openfolio_content_form($form, &$form_state) {
  $form['sample_content'] = array(
      '#type' => 'checkbox',
      '#title' => st('Install Sample Content'),
      '#default_value' => 1,
      '#description' => st('Install sample picture files and galleries.'),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => st('Save and continue'),
      '#weight' => 15,
  );
  return $form;
}
/**
 * Forms API submit for the site configuration form.
 */
function openfolio_content_form_submit($form, &$form_state) {
  if($form_state['values']['sample_content']) {
    module_enable(array('openfolio_content'));
    // We don't need these modules after importing data
    module_disable(array('openfolio_content','node_export','uuid'));
  }
}